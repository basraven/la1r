apiVersion: v1
kind: ServiceAccount
metadata:
  name: tekton-prod-deploy-sa
  namespace: tekton-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: tekton-triggers-la1r-minimal
  namespace: tekton-pipelines
rules:
# EventListeners need to be able to fetch all namespaced resources
- apiGroups: ["triggers.tekton.dev"]
  resources: ["eventlisteners", "triggerbindings", "triggertemplates", "triggers"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
 # secrets are only needed for GitHub/GitLab interceptors
 # configmaps is needed for updating logging config
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
 # Permissions to create resources in associated TriggerTemplates
- apiGroups: ["tekton.dev"]
  resources: ["pipelineruns", "pipelineresources", "taskruns"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["impersonate"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tekton-triggers-la1r-binding
  namespace: tekton-pipelines
subjects:
- kind: ServiceAccount
  name: tekton-prod-deploy-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-triggers-la1r-minimal
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-triggers-la1r-clusterrole
  namespace: tekton-pipelines
rules:
  # EventListeners need to be able to fetch any clustertriggerbindings
- apiGroups: ["triggers.tekton.dev"]
  resources: ["clustertriggerbindings"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tekton-triggers-la1r-clusterbinding
  namespace: tekton-pipelines
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-triggers-la1r-clusterrole
subjects:
- kind: ServiceAccount
  name: tekton-prod-deploy-sa
  namespace: tekton-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tekton-admin-clusterbinding
  namespace: tekton-pipelines
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: tekton-prod-deploy-sa
  namespace: tekton-pipelines


---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: git-la1r-rick
  namespace: tekton-pipelines
spec:
  type: git
  params:
    - name: revision
      value: rick
    - name: url
      value: https://github.com/basraven/la1r

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-using-kubectl
  namespace: tekton-pipelines
spec:
  params:
    - name: path
      type: string
      description: Path to the manifest to apply
    - name: yamlPathToImage
      type: string
      description: |
        The path to the image to replace in the yaml manifest (arg to yq)
  resources:
    inputs:
      - name: git-la1r-rick
        type: git
  steps:
    - name: run-kubectl
      image: lachlanevenson/k8s-kubectl
      command: ["sh"]
      args:
      - -c
      - |- 
        find $(params.path) -type f -name *.y*ml \
        -not \( -path $(params.path)/storage/example/example-ngx-mount.yml -prune \) \
        -not \( -path $(params.path)/kubernetes-dashboard\dashboard-admin.yaml -prune \) \
        -exec kubectl apply -f {} \;
        # -exec kubectl --dry-run=client apply -f {} \;


---
apiVersion: polling.tekton.dev/v1alpha1
kind: Repository
metadata:
  name: la1r-repository
  namespace: tekton-pipelines
spec:
  url: https://github.com/basraven/la1r.git
  ref: rick
  frequency: 1m
  type: github # can also be gitlab
  pipelineRef:
    name: la1r-poll-pipeline-prod-deploy
    namespace: tekton-pipelines # optional: if provided, the pipelinerun will be created in this namespace to reference the pipeline.
    params:
    - name: sha
      expression: commit.sha
    - name: repoURL
      expression: repoURL
    resources:
    - name: git-la1r-rick
      resourceSpec:
        type: git
        params:
        - name: revision
          value: $(params.sha)
        - name: url
          value: $(params.repoURL)
---
apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: la1r-poll-pipeline-prod-deploy
  namespace: tekton-pipelines
spec:
  resources:
  - name: git-la1r-rick
    type: git
  params:
  - name: sha
    type: string
    description: "the SHA of the recently detected change"
  - name: repoURL
    type: string
    description: "the cloneURL that the change was detected in"
  tasks:
  - name: deploy-kubectl
    params:
    - name: path
      value: /workspace/git-la1r-rick/kubernetes #configure: may change according to your source
    - name: yamlPathToImage
      value: "spec.template.spec.containers[0].image"
    taskRef:
      name: deploy-using-kubectl
    resources:
      inputs:
        - name: git-la1r-rick
          resource: git-la1r-rick
  # - name: echo-changes
  #   params:
  #   - name: sha
  #     value: $(params.sha)
  #   - name: repoURL
  #     value: $(params.repoURL)
  #   taskSpec:
  #     inputs:
  #       resources:
  #       - name: git-la1r-rick
  #         type: git
  #     params:
  #     - name: sha
  #       type: string
  #     - name: repoURL
  #       type: string
  #     steps:
  #     - name: echo
  #       image: alpine
  #       script: |
  #         echo "SHA change detected $(params.sha)"
  #         echo "                    $(params.repoURL)"
  #         ls /workspace/git-la1r-rick
  #   resources:
  #     inputs:
  #     - name: git-la1r-rick
  #       resource: git-la1r-rick